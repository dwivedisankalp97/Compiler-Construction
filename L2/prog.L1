(:main
(:main
	0 3
	r10 <- 5
	mem rsp 8 <- r10
	r10 <- mem rsp 8
	r10 <<= 1
	mem rsp 8 <- r10
	r10 <- mem rsp 8
	r10 += 1
	mem rsp 8 <- r10
	r10 <- mem rsp 8
	rdi <- r10
	rsi <- 3
	call allocate 2
	r10 <- rax
	mem rsp 16 <- r10
	r10 <- mem rsp 16
	r10 <- r10
	r10 += 8
	mem r10 0 <- 5
	r10 <- mem rsp 16
	r10 <- r10
	r10 += 16
	mem r10 0 <- 7
	r10 <- mem rsp 16
	rdi <- r10
	call print 1
	r10 <- mem rsp 8
	rdi <- r10
	rsi <- 3
	call allocate 2
	r10 <- rax
	mem rsp 0 <- r10
	mem rsp -8 <- :main_ret3
	r10 <- mem rsp 0
	rdi <- r10
	rsi <- 3
	rdx <- 1
	call :storeValueToArray 3
	:main_ret3
	r10 <- mem rsp 0
	rdi <- r10
	call print 1
	mem rsp -8 <- :main_ret5
	r10 <- mem rsp 16
	rdi <- r10
	r10 <- mem rsp 0
	rsi <- r10
	call :isArraySame 2
	:main_ret5
	r10 <- rax
	mem rsp -8 <- :main_ret6
	rdi <- r10
	call :encode 1
	:main_ret6
	r10 <- rax
	rdi <- r10
	call print 1
	return
)

(:isAddress
	1 0
	r10 <- rdi
	r10 <- r10
	r10 &= 1
	r10 <- r10 = 0
	cjump r10 = 1 :isAddress_isAddress
	goto :isAddress_isNumber
	:isAddress_isAddress
	rax <- 1
	return
	:isAddress_isNumber
	rax <- 0
	return
)

(:encode
	1 0
	r10 <- rdi
	:encode_entry
	r10 <<= 1
	r10 += 1
	rax <- r10
	return
)

(:increaseOne
	1 0
	r10 <- rdi
	r10 <- r10
	r10 += 1
	rax <- r10
	return
)

(:isEqual
	2 0
	r11 <- rdi
	r10 <- rsi
	r10 <- r11 = r10
	cjump r10 = 1 :isEqual_equal
	goto :isEqual_not_equal
	:isEqual_equal
	rax <- 1
	return
	:isEqual_not_equal
	rax <- 0
	return
)

(:getSamller
	2 2
	r10 <- rdi
	mem rsp 0 <- r10
	r10 <- rsi
	mem rsp 8 <- r10
	mem rsp -8 <- :getSamller_ret0
	r10 <- mem rsp 0
	rdi <- r10
	r10 <- mem rsp 8
	rsi <- r10
	call :isSmallerAndEqual 2
	:getSamller_ret0
	r10 <- rax
	cjump r10 = 1 :getSamller_p1_smaller
	goto :getSamller_p2_smaller
	:getSamller_p1_smaller
	r10 <- mem rsp 0
	rax <- r10
	return
	:getSamller_p2_smaller
	r10 <- mem rsp 8
	rax <- r10
	return
)

(:isSmaller
	2 0
	r11 <- rdi
	r10 <- rsi
	r10 <- r11 < 1
	cjump r10 = 1 :isSmaller_smaller
	goto :isSmaller_larger
	:isSmaller_smaller
	rax <- 1
	return
	:isSmaller_larger
	rax <- 0
	return
)

(:isSmallerAndEqual
	2 0
	r11 <- rdi
	r10 <- rsi
	r10 <- r11 <= 1
	cjump r10 = 1 :isSmallerAndEqual_smaller
	goto :isSmallerAndEqual_larger
	:isSmallerAndEqual_smaller
	rax <- 1
	return
	:isSmallerAndEqual_larger
	rax <- 0
	return
)

(:getArrayElementByIndex
	2 1
	r10 <- rdi
	mem rsp 0 <- r10
	r10 <- rsi
	mem rsp -8 <- :getArrayElementByIndex_ret0
	rdi <- r10
	call :increaseOne 1
	:getArrayElementByIndex_ret0
	r10 <- rax
	r11 <- 8
	r11 *= r10
	r10 <- mem rsp 0
	r10 <- r10
	r10 += r11
	r10 <- mem r10 0
	rax <- r10
	return
)

(:storeValueToArray
	3 5
	r10 <- rdi
	mem rsp 16 <- r10
	r10 <- rsi
	mem rsp 24 <- r10
	r10 <- rdx
	mem rsp 8 <- r10
	mem rsp -8 <- :storeValueToArray_ret0
	r10 <- mem rsp 16
	rdi <- r10
	call :isAddress 1
	:storeValueToArray_ret0
	r10 <- rax
	cjump r10 = 1 :storeValueToArray_is_array_label
	goto :storeValueToArray_end_label
	:storeValueToArray_is_array_label
	r10 <- mem rsp 16
	r10 <- mem r10 0
	mem rsp 32 <- r10
	mem rsp -8 <- :storeValueToArray_ret1
	rdi <- 3
	r10 <- mem rsp 32
	rsi <- r10
	call :getSamller 2
	:storeValueToArray_ret1
	r10 <- rax
	mem rsp 32 <- r10
	:storeValueToArray_loop_start
	r10 <- mem rsp 8
	r11 <- mem rsp 32
	r10 <- r10 < r11
	cjump r10 = 1 :storeValueToArray_loop_next
	goto :storeValueToArray_end_label
	:storeValueToArray_loop_next
	mem rsp -8 <- :storeValueToArray_ret2
	r10 <- mem rsp 8
	rdi <- r10
	call :increaseOne 1
	:storeValueToArray_ret2
	r10 <- rax
	r11 <- 8
	r11 *= r10
	r10 <- mem rsp 16
	r10 <- r10
	mem rsp 0 <- r10
	r10 <- mem rsp 0
	r10 += r11
	mem rsp 0 <- r10
	r10 <- mem rsp 8
	r11 <- mem rsp 24
	r11 += r10
	mem rsp 24 <- r11
	mem rsp -8 <- :storeValueToArray_ret3
	r10 <- mem rsp 24
	rdi <- r10
	call :encode 1
	:storeValueToArray_ret3
	r10 <- rax
	r11 <- mem rsp 0
	mem r11 0 <- r10
	r10 <- mem rsp 8
	r10 += 1
	mem rsp 8 <- r10
	goto :storeValueToArray_loop_start
	:storeValueToArray_end_label
	return
)

(:isArraySame
	2 6
	r10 <- rdi
	mem rsp 40 <- r10
	r10 <- rsi
	mem rsp 32 <- r10
	mem rsp -8 <- :isArraySame_ret0
	r10 <- mem rsp 40
	rdi <- r10
	call :isAddress 1
	:isArraySame_ret0
	r10 <- rax
	mem rsp 0 <- r10
	mem rsp -8 <- :isArraySame_ret1
	r10 <- mem rsp 32
	rdi <- r10
	call :isAddress 1
	:isArraySame_ret1
	r10 <- rax
	r10 <- mem rsp 0
	cjump r10 = 1 :isArraySame_go_ahead_label
	goto :isArraySame_end_label
	cjump r10 = 1 :isArraySame_go_ahead_label
	goto :isArraySame_end_label
	:isArraySame_end_label
	rax <- 0
	return
	:isArraySame_go_ahead_label
	r10 <- mem rsp 40
	r10 <- mem r10 0
	mem rsp 24 <- r10
	r10 <- mem rsp 32
	r11 <- mem r10 0
	mem rsp -8 <- :isArraySame_ret2
	r10 <- mem rsp 24
	rdi <- r10
	rsi <- r11
	call :isEqual 2
	:isArraySame_ret2
	r10 <- rax
	cjump r10 = 1 :isArraySame_chek_elements_label
	goto :isArraySame_end_label
	:isArraySame_chek_elements_label
	r10 <- 0
	mem rsp 16 <- r10
	:isArraySame_loop_start
	r10 <- mem rsp 16
	r11 <- mem rsp 24
	r10 <- r10 < r11
	cjump r10 = 1 :isArraySame_loop_next
	goto :isArraySame_loop_end
	:isArraySame_loop_next
	mem rsp -8 <- :isArraySame_ret3
	r10 <- mem rsp 40
	rdi <- r10
	r10 <- mem rsp 16
	rsi <- r10
	call :getArrayElementByIndex 2
	:isArraySame_ret3
	r10 <- rax
	mem rsp 8 <- r10
	mem rsp -8 <- :isArraySame_ret4
	r10 <- mem rsp 32
	rdi <- r10
	r10 <- mem rsp 16
	rsi <- r10
	call :getArrayElementByIndex 2
	:isArraySame_ret4
	r11 <- rax
	mem rsp -8 <- :isArraySame_ret5
	r10 <- mem rsp 8
	rdi <- r10
	rsi <- r11
	call :isEqual 2
	:isArraySame_ret5
	r10 <- rax
	cjump r10 = 1 :isArraySame_continue_checking_label
	goto :isArraySame_end_label
	:isArraySame_continue_checking_label
	r10 <- mem rsp 16
	r10 += 1
	mem rsp 16 <- r10
	goto :isArraySame_loop_start
	:isArraySame_loop_end
	rax <- 1
	return
)

)
